@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@using Syncfusion.Blazor.PdfViewer
@inject NavigationManager _navigationManager

<h3>Collaborative Pdf Viewer</h3>
<h5>@hubConnection?.State.ToString()</h5>
<h5>@DocumentPath</h5>
<button type="submit" class="btn btn-outline-success btn-icon" @onclick="@OpenPdf">
    <i class="fas fa-folder-open pr-2"></i>
    Open Pdf
</button>
<button type="submit" class="btn btn-outline-primary btn-icon" @onclick="@NextPage"><i class="fas fa-arrow-right"></i>Next Page</button>
<button type="submit" class="btn btn-outline-danger btn-icon" @onclick="@PreviousPage"><i class="fas fa-arrow-left"></i>Previous Page</button>
<div style="display:inline-block">
    <button type="submit" class="btn btn-outline-danger btn-icon" @onclick="@OnZoomInClick">
        <i class="fas fa-search-plus"></i>
        Zoom In
    </button>
</div>
<div style="display:inline-block">
    <button type="submit" class="btn btn-outline-danger btn-icon" @onclick="@OnZoomOutClick">
        <i class="fas fa-search-minus"></i>
        Zoom Out
    </button>
</div>
<div style="display:inline-block">
    <h4>@currentPage of @pageNo</h4>
</div>
<br/>
<br/>
<br/>



<SfPdfViewerServer EnableToolbar="true" 
                   EnableBookmarkPanel="false"
                   Width="1060px"
                   Height="900px"
                   DocumentPath="@DocumentPath"
                   @ref="@pdfViewer">
    <PdfViewerEvents OnTextSelectionEnd="selectionEnd"></PdfViewerEvents> 
</SfPdfViewerServer>

@code {
    private HubConnection? hubConnection;
    SfPdfViewerServer pdfViewer;
    private string? DocumentPath { get; set; } //= "wwwroot/pdffiles/Enterprise-Application-Patterns-using-XamarinForms.pdf";
    string bookOne = "wwwroot/pdffiles/Enterprise-Application-Patterns-using-XamarinForms.pdf";
    string bookTwo = "wwwroot/pdffiles/AamirKhan_Resume_.pdf";
    int pageNo = 0;
    int currentPage = 0;

    protected override async Task OnInitializedAsync()
    {
    //Create Connection with SignalR
        hubConnection = new HubConnectionBuilder()
                .WithUrl(_navigationManager.ToAbsoluteUri("/collaborationHub"))
                .Build();

        hubConnection.On<string>("OnOpenPdf", (doc) =>
        {
            Debug.WriteLine("message" + doc);
            DocumentPath = doc;
            StateHasChanged();
        });

        hubConnection.On<string>("OnGoToNextPage", (user) =>
        {
            pdfViewer.GoToNextPage();
            StateHasChanged();
        });

        hubConnection.On<string>("OnGoToPreviousPage", (user) =>
        {
            pdfViewer.GoToPreviousPage();
            StateHasChanged();
        });
        hubConnection.On<string>("OnZoomIn", (user) =>
        {
            pdfViewer.ZoomIn();
            StateHasChanged();
        });
        hubConnection.On<string>("OnZoomOut", (user) =>
        {
            pdfViewer.ZoomOut();
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    
    public void selectionEnd(TextSelectionEndEventArgs args)
    {
        var data = args;
        var bounds = args.TextBounds;
        var text = args.TextContent;
    } 
    public bool IsConnected =>
            hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void OnZoomOutClick()
    {
        pdfViewer.ZoomOut();
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("ZoomOut", "zoomIn");
        }
    }

    private void OnZoomInClick()
    {
        pdfViewer.ZoomIn();
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("ZoomIn", "zoomOut");
        }
    }
    
    private async void OpenPdf()
    {
        if (string.IsNullOrWhiteSpace(DocumentPath))
        {
            DocumentPath = bookOne;
            pageNo = pdfViewer.PageCount;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("OpenPdf", _navigationManager.BaseUri + DocumentPath);
            }
        }
        else if (DocumentPath == bookOne)
        {
            DocumentPath = bookTwo;
            pageNo = pdfViewer.PageCount;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("OpenPdf", DocumentPath);
            }
        }
        else if (DocumentPath == bookTwo)
        {
            DocumentPath = bookOne;
            currentPage = pdfViewer.CurrentPageNumber;
            pageNo = pdfViewer.PageCount;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("OpenPdf", DocumentPath);
            }
        }
    }


    private async void NextPage()
    {
        await pdfViewer.GoToNextPageAsync();
        currentPage = pdfViewer.CurrentPageNumber;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GoToNextPage", "nextPage");
        }
    }

    private async void PreviousPage()
    {
        await pdfViewer.GoToPreviousPageAsync();
        currentPage = pdfViewer.CurrentPageNumber;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GoToPreviousPage", DocumentPath);
        }
    }

}